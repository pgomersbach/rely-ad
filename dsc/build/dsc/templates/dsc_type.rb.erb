# workaround for cross modules dependencies
master_path = File.expand_path(File.join(__FILE__, '..', '..', '..', '..', '..', '<%= @module_path.basename.to_s.split('-').last %>','lib'))
$:.push(master_path) if File.directory?(master_path)
require 'puppet/type/base_dsc'

Puppet::Type.newtype(:dsc_<%= resource.friendlyname.downcase %>) do

  provide :powershell, :parent => Puppet::Type.type(:base_dsc).provider(:powershell) do
    defaultfor :operatingsystem => :windows
  end

  provide :mof, :parent => Puppet::Type.type(:base_dsc).provider(:mof)

  @doc = %q{
    The DSC <%= resource.friendlyname%> resource type.
    Originally generated from the following schema.mof file:
      <%= resource.relative_mof_path %>
  }

  validate do
  <%  resource.properties.select{|rp| rp.required? }.each do |property| -%>
    fail('dsc_<%= property.name.downcase %> is a required attribute') if self[:dsc_<%= property.name.downcase %>].nil?
  <%  end -%>
  end

  newparam(:dscmeta_resource_friendly_name) do
    defaultto "<%= resource.friendlyname %>"
  end

  newparam(:dscmeta_resource_name) do
    defaultto "<%= resource.name %>"
  end

  newparam(:dscmeta_import_resource) do
    newvalues(true, false)

    munge do |value|
      value.to_s.downcase.to_bool
    end

    defaultto true
  end

  newparam(:dscmeta_module_name) do
    defaultto "<%= resource.ps_module.name %>"
  end

  newparam(:dscmeta_module_version) do
    defaultto "<%= resource.ps_module.version %>"
  end

  newparam(:name, :namevar => true ) do
  end
<%  if resource.ensurable? -%>

  ensurable do
    defaultvalues
    defaultto :present
  end
<%  end -%>

<%  resource.properties.each do |property| -%>
  # Name:         <%= property.name %>
  # Type:         <%= property.type %>
  # IsMandatory:  <%= property.required? ? 'True' : 'False' %>
  # Values:       <%= property.values ? property.values : 'None' %>
  newparam(:dsc_<%= property.name.downcase %><% if property.array? %>, :array_matching => :all<% end %>) do
<%    if property.description -%>
    desc "<%= property.description %>"
<%    end -%>
<%    if property.required? -%>
    isrequired
<%    end -%>
    validate do |value|
<%    if property.name.downcase == 'ensure' -%>
      resource[:ensure] = value.downcase
<%    end -%>
<%    case -%>
<%    when property.array? -%>
      unless value.kind_of?(Array) || value.kind_of?(String)
        fail("Invalid value '#{value}'. Should be a string or an array of strings")
      end
<%    when property.bool? -%>
<%    when property.int? -%>
      unless value.kind_of?(Numeric) || value.to_i.to_s == value || value.to_i >= 0
          fail("Invalid value #{value}. Should be a signed Integer")
      end
<%    when property.uint? -%>
      unless (value.kind_of?(Numeric) && value >= 0) || (value.to_i.to_s == value && value.to_i >= 0)
          fail("Invalid value #{value}. Should be a unsigned Integer")
      end
<%    else -%>
      unless value.kind_of?(String)
        fail("Invalid value '#{value}'. Should be a string")
      end
<%    end -%>
<%    if property.values && property.values.any? -%>
<%      if property.array? -%>
      if value.kind_of?(Array)
        unless ([<%= format_newvalues(property.values) %>] & value).count == value.count
          fail("Invalid value #{value}. Valid values are <%= property.values.join(', ') %>")
        end
      end
      if value.kind_of?(String)
        unless [<%= format_newvalues(property.values) %>].include?(value)
          fail("Invalid value #{value}. Valid values are <%= property.values.join(', ') %>")
        end
      end
<%      else -%>
      unless [<%= format_newvalues(property.values) %>].include?(value)
        fail("Invalid value '#{value}'. Valid values are <%= property.values.join(', ') %>")
      end
<%      end -%>
<%    end -%>
    end
<%  case -%>
<%  when property.bool? -%>
    newvalues(true, false)
<%  end -%>
<%    case -%>
<%    when property.bool? -%>
    munge do |value|
      value.to_s.downcase.to_bool
    end
<%    when (property.int? || property.uint?) -%>
    munge do |value|
      value.to_i
    end
<%    else -%>
<%    end -%>
  end

<%  end %>
end
